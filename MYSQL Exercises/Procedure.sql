-- NAME:EFE CAN NERMAN...
-- ID:17070006023...
-- SE2222 LAB PRACTICE (STORED PROCEDURES) 
-- USE THIS SQL FILE AS TEMPLATE.  
-- YOU WILL SUBMIT 1 FILE. 
-- SUBMIT YOUR FILES LIKE [YOURID].SQL
-- YOUR SUBMITTED SQL FILE MUST BEGIN WITH COMMENT LINES CONTAINING YOUR NAME AND ID.
-- OTHERWISE WILL NOT BE EVALUATED.
-- USE DEMO.SQL DEFINITIONS AS WE HAVE DONE IN LAB SESSIONS
-- ______________________________________________________________________________

-- 1.
-- CREATE A PROCEDURE THAT SELECTS ALL DATA FROM EMP TABLE
DELIMITER $$
CREATE PROCEDURE SELECTALLOFEMP()
BEGIN
SELECT * FROM EMP;
END $$
DELIMITER ;
-- TEST
CALL SELECTALLOFEMP();
SELECT * FROM EMP;

-- 2.
-- CREATE A PROCEDURE THAT RETURNS 5 ADDED TO A GIVEN INTEGER NUMBER.
-- INSIDE PROCEDURE BODY USE ADD5 FUNCTION YOU CREATED LAST WEEK 
DELIMITER $$
CREATE PROCEDURE ADD5(in number integer,out RESULT integer)
BEGIN
SET RESULT=number+5;
END $$
DELIMITER ;
-- TEST
CALL ADD5(3,@RESULT);
SELECT @RESULT;

-- 3.
-- CREATE A PROCEDURE THAT SELECTS EPLOYEE NAMES FROM EMP TABLE FOR A GIVEN EMPNO
DELIMITER $$
CREATE PROCEDURE SELECTNAMEOFEMP(in emp_no integer)
BEGIN
SELECT ENAME FROM emp
WHERE emp.EMPNO=emp_no;
END $$
DELIMITER ;
-- TEST
CALL SELECTNAMEOFEMP(7839);


-- 4.
-- CREATE A PROCEDURE THAT UPDATES SALARIES OF ALL EMPLOYEES BY GIVEN INTEGER RATE
DELIMITER $$
CREATE PROCEDURE INCREASE_SAL(in rate integer)
BEGIN
UPDATE EMP
SET SAL=SAL+SAL*(rate/100);
END $$
DELIMITER ;

-- TEST
SELECT * FROM EMP;
CALL INCREASE_SAL(10); -- means increase %10
SELECT * FROM EMP;

-- 5. 
-- CREATE A PROCEDURE THAT SELECTS EMPNO, ENAME, SAL OF EMPLOYEES
-- WHO HAVE SALARY BETWEEN GIVEN INTERVALS
DELIMITER $$
CREATE PROCEDURE SELECTSALEMP(in number1 integer,in number2 integer)
BEGIN
SELECT EMPNO,ENAME,SAL FROM emp
WHERE SAL BETWEEN number2 and number1;
END $$ 
DELIMITER ; 
-- TEST
CALL SELECTSALEMP(2000,1000);

-- 6. 
-- CREATE A PROCEDURE THAT RETURNS FACTORIAL OF A GIVEN INTEGER
DELIMITER $$
CREATE PROCEDURE FACT(in input1 integer,out F integer)
BEGIN
DECLARE factorial INT ;
set factorial =1;
 WHILE 1 <= input1
 DO
   set factorial =factorial * input1;
   SET input1 =input1 -1 ;
   END WHILE ;

SET F = factorial;
END $$
DELIMITER ;

-- TEST
CALL FACT(3,@F);
SELECT @F;
CALL FACT(4,@F);
SELECT @F;

-- 7.
-- 	CREATE A PROCEDURE THAT RETURNS EMPLOYEE NAME FOR A GIVEN EMPNO
-- 	DISPLAYS ERROR MESSAGE EMPNO NOT FOUND IF THERE IS NO SUCH EMPLOYEE
-- SELECT "EMPNO NOT FOUND" AS "ERROR MESSAGE";
-- DISPLAYS WARNING MESSAGE IF THERE ARE MORE THAN ONE EMPLOYEE WITH IDENTICAL EMPNO
-- SELECT "THERE ARE MULTIPLE EMPLOYEES FOR GIVEN EMPNO" AS "WARNING MESSAGE";
DELIMITER $$
CREATE PROCEDURE FINDENAME(IN employee_no INT,OUT EN VARCHAR(250))
BEGIN 
IF(SELECT EMPNO FROM EMP WHERE EMPNO = employee_no) THEN SET EN = (SELECT ENAME FROM EMP WHERE EMPNO = employee_no);
ELSE IF(SELECT EMPNO FROM EMP GROUP BY EMPNO HAVING COUNT(employee_no) > 1) THEN (SELECT "THERE ARE MULTIPLE EMPLOYEES FOR GIVEN EMPNO" AS "WARNING MESSAGE");
ELSE (SELECT "EMPNO NOT FOUND" AS "ERROR MESSAGE");
END IF;
END IF;
END $$
DELIMITER ;
--
CALL FINDENAME(7839,@EN);
SELECT @EN AS EMPLOYEE;
CALL FINDENAME(9999,@EN);
SELECT @EN AS EMPLOYEE;
CALL FINDENAME(1111,@EN);
SELECT @EN AS EMPLOYEE;



